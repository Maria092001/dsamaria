You are given two strings of equal lengths, s1 and s2. The task is to check if s2 is a rotated version of the string s1.

Note: The characters in the strings are in lowercase.

Example 1:

Input:
geeksforgeeks
forgeeksgeeks
Output: 
1
Explanation: s1 is geeksforgeeks, s2 is
forgeeksgeeks. Clearly, s2 is a rotated
version of s1 as s2 can be obtained by
left-rotating s1 by 5 units.


Implementation
Create a temp string and store concatenation of str1 and str1 in temp, i.e; temp = str1+str1
And then check If str2 is a substring of temp then str1 and str2 are rotations of each other.

class Solution
{
    //Function to check if two strings are rotations of each other or not.
    public static boolean areRotations(String s1, String s2 )
    {
        //we concatenate first string to itself and check if other 
        //string occurs in it as substring. If yes, then it 
        //is rotated version and we return true else false.
        if((s1.length()==s2.length())&&((s1+s1).contains(s2)))
        {
            return true;
        }
        return false;
    }
    
}
